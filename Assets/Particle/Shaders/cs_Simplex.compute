#pragma kernel CSMain
#include "csInclude.cginc"
#define SOMELARGEFLOATS float3( 635.298681, 682.357502, 668.926525 )
#define ZINC float3( 48.500388, 65.294118, 63.934599 )


float _SimplexStrength;
float3 _Center;
float _Frequency;
float _Amplitude;

//thanks for simplex func here: https://github.com/everyoneishappy/happy.fxh/blob/master/noise.fxh
//3D w/ gradient
float4 simplexGrad(float3 p)
{
	const float SKEWFACTOR = 1.0 / 3.0;
	const float UNSKEWFACTOR = 1.0 / 6.0;
	const float SIMPLEX_CORNER_POS = 0.5;
	const float SIMPLEX_TETRAHADRON_HEIGHT = 0.70710678118654752440084436210485;  // sqrt( 0.5 )

	//  establish our grid cell.
	p *= SIMPLEX_TETRAHADRON_HEIGHT;    // scale space so we can have an approx feature size of 1.0
	float3 Pi = floor(p + dot(p, SKEWFACTOR));

	//  Find the vectors to the corners of our simplex tetrahedron
	float3 x0 = p - Pi + dot(Pi, UNSKEWFACTOR);
	float3 g = step(x0.yzx, x0.xyz);
	float3 l = 1.0 - g;
	float3 Pi_1 = min(g.xyz, l.zxy);
	float3 Pi_2 = max(g.xyz, l.zxy);
	float3 x1 = x0 - Pi_1 + UNSKEWFACTOR;
	float3 x2 = x0 - Pi_2 + SKEWFACTOR;
	float3 x3 = x0 - SIMPLEX_CORNER_POS;

	//  pack them into a parallel-friendly arrangement
	float4 v1234_x = float4(x0.x, x1.x, x2.x, x3.x);
	float4 v1234_y = float4(x0.y, x1.y, x2.y, x3.y);
	float4 v1234_z = float4(x0.z, x1.z, x2.z, x3.z);

	// clamp the domain of our grid cell
	Pi.xyz = Pi.xyz - floor(Pi.xyz * (1.0 / 69.0)) * 69.0;
	float3 Pi_inc1 = step(Pi, 69.0 - 1.5) * (Pi + 1.0);

	//  generate the random vectors
	float4 Pt = float4(Pi.xy, Pi_inc1.xy) + float2(50.0, 161.0).xyxy;
	Pt *= Pt;
	float4 V1xy_V2xy = lerp(Pt.xyxy, Pt.zwzw, float4(Pi_1.xy, Pi_2.xy));
	Pt = float4(Pt.x, V1xy_V2xy.xz, Pt.z) * float4(Pt.y, V1xy_V2xy.yw, Pt.w);
	float3 lowz_mods = float3(1.0 / (SOMELARGEFLOATS.xyz + Pi.zzz * ZINC.xyz));
	float3 highz_mods = float3(1.0 / (SOMELARGEFLOATS.xyz + Pi_inc1.zzz * ZINC.xyz));
	Pi_1 = (Pi_1.z < 0.5) ? lowz_mods : highz_mods;
	Pi_2 = (Pi_2.z < 0.5) ? lowz_mods : highz_mods;
	float4 hash_0 = frac(Pt * float4(lowz_mods.x, Pi_1.x, Pi_2.x, highz_mods.x)) - 0.49999;
	float4 hash_1 = frac(Pt * float4(lowz_mods.y, Pi_1.y, Pi_2.y, highz_mods.y)) - 0.49999;
	float4 hash_2 = frac(Pt * float4(lowz_mods.z, Pi_1.z, Pi_2.z, highz_mods.z)) - 0.49999;

	//  normalize random gradient vectors
	float4 norm = rsqrt(hash_0 * hash_0 + hash_1 * hash_1 + hash_2 * hash_2);
	hash_0 *= norm;
	hash_1 *= norm;
	hash_2 *= norm;

	//  evaluate gradients
	float4 grad_results = hash_0 * v1234_x + hash_1 * v1234_y + hash_2 * v1234_z;

	//  evaulate the kernel weights ( use (0.5-x*x)^3 instead of (0.6-x*x)^4 to fix discontinuities )
	float4 m = v1234_x * v1234_x + v1234_y * v1234_y + v1234_z * v1234_z;
	m = max(0.5 - m, 0.0);
	float4 m2 = m * m;
	float4 m3 = m * m2;

	//  calc the derivatives
	float4 temp = -6.0 * m2 * grad_results;
	float xderiv = dot(temp, v1234_x) + dot(m3, hash_0);
	float yderiv = dot(temp, v1234_y) + dot(m3, hash_1);
	float zderiv = dot(temp, v1234_z) + dot(m3, hash_2);

	//  Normalization factor to scale the final result to a strict 1.0->-1.0 range
	//  http://briansharpe.wordpress.com/2012/01/13/simplex-noise/#comment-36
	const float  FINAL_NORMALIZATION = 37.837227241611314102871574478976;

	//  sum and return all results as a float3
	return float4(dot(m3, grad_results), xderiv, yderiv, zderiv) * FINAL_NORMALIZATION;
}


[numthreads(thread_group_size_x, thread_group_size_y, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float3 simplex0 = simplexGrad((output[id.x].pos + float3(0, _SimplexStrength * output[id.x].age, 0)) * _Frequency).xyz;
	float3 simplex1 = simplexGrad(simplex0).xyz;
	float3 simplex2 = simplexGrad(simplex0 + float3(0, 1,0)).xyz;
	output[id.x].vel += cross(simplex1,simplex2) * _Amplitude	* output[id.x].age;
}
